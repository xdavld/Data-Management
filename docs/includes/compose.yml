services:
  storage:
    image: minio/minio:latest
    container_name: minio
    command: server --console-address ":9101" /data
    ports:
      - "9000:9000" # MinIO API
      - "9101:9101" # MinIO Console
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    volumes:
      - ./minio/data:/data
      - ./minio/config:/root/.minio
    networks:
      - lakehouse-network

  storage-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      - storage
    entrypoint: >
      /bin/sh -c "
      sleep 5 &&
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      if ! mc ls myminio/lakehouse-storage >/dev/null 2>&1; then
        mc mb myminio/lakehouse-storage;
      fi
      "
    networks:
      - lakehouse-network

  compute:
    build:
      context: ./compute
      dockerfile: Dockerfile
    container_name: duckdb-ibis-python
    depends_on:
      - storage
    working_dir: /app
    volumes:
      - ./compute/src:/app/src
      - ./compute/data:/app/data
      - ./compute/duckdb-file:/app/duckdb-file 
    environment:
      MINIO_URL: "http://minio:9000"
      MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY}"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY}"
    networks:
      - lakehouse-network

  visualisation:
    image: apache/superset:latest
    container_name: apache-superset
    ports:
      - "8088:8088"
    depends_on:
      - compute
    environment:
      SUPERSET_LOAD_EXAMPLES: "yes"
      SUPERSET_ADMIN_USERNAME: "${SUPERSET_ADMIN_USERNAME}"
      SUPERSET_ADMIN_PASSWORD: "${SUPERSET_ADMIN_PASSWORD}"
      SUPERSET_SECRET_KEY: "${SUPERSET_SECRET_KEY}"
    volumes:
      - ./superset:/var/lib/superset
      - ./compute/duckdb-file:/app/duckdb-file 
    networks:
      - lakehouse-network
    command: >
      /bin/sh -c "
      pip install duckdb duckdb-engine &&
      superset db upgrade &&
      superset fab create-admin --username ${SUPERSET_ADMIN_USERNAME} --password ${SUPERSET_ADMIN_PASSWORD} --firstname Admin --lastname User --email admin@example.com &&
      superset init &&
      superset run -h 0.0.0.0 -p 8088
      "
    deploy:
      resources:
        limits:
          cpus: "2.0"    # Allocate 2 CPU cores
          memory: "4g"   # Allocate 4 GB of RAM

  spark-master:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_WORKER_MEMORY=2G
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
      - MINIO_URL=http://minio:9000
    ports:
      - "8080:8080"   # Master web UI
      - "7077:7077"   # Master RPC port
      - "4040:4040"   # Driver web UI 
    volumes:
      - ./spark/src:/app/src
      - ./spark/data:/app/data
      - ./spark/delta-data:/tmp/delta-table
      - ./spark/logs:/opt/spark/logs
    networks:
      - lakehouse-network

  spark-worker:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker
    depends_on:
      - spark-master
      - storage
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
      - MINIO_URL=http://minio:9000
    volumes:
      - ./spark/src:/app/src
      - ./spark/data:/app/data
      - ./spark/delta-data:/tmp/delta-table
      - ./spark/logs:/opt/spark/logs
    networks:
      - lakehouse-network

  spark-submit:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-submit
    volumes:
      - ./spark/src:/app/src
      - ./spark/data:/app/data
      - ./spark/delta-data:/tmp/delta-table
      - ./spark/logs:/opt/spark/logs
    depends_on:
      - spark-master
      - spark-worker
      - storage
    environment:
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    restart: always
    networks:
      - lakehouse-network
    command: >
      /bin/bash -c "
      while true; do
        echo 'Starting Spark job...';
        spark-submit --master spark://spark-master:7077 \
          --packages io.delta:delta-core_2.12:2.4.0,org.apache.hadoop:hadoop-aws:3.4.0,com.amazonaws:aws-java-sdk-bundle:1.12.277 \
          /app/src/main.py;
        echo 'Sleeping for 30 minutes...';
        sleep 1800;
      done
      "

  scraper:
    platform: linux/amd64
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: scraper
    volumes:
      - ./scraper/src:/app/src
      - ./spark/data:/app/data  
    depends_on:
      - storage
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_URL=http://minio:9000
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - SELENIUM_SERVER_URL=http://selenium:4444/wd/hub
      - XDG_CACHE_HOME=/tmp/.cache
    restart: always
    networks:
      - lakehouse-network
    command: >
      /bin/bash -c "
      while true; do
        echo 'Starting scraper...';
        python3 /app/src/scrape_glasdoor.py;
        echo 'Sleeping for 30 minutes...';
        sleep 1800;
      done
      "

networks:
  lakehouse-network:
    driver: bridge
